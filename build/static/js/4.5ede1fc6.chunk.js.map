{"version":3,"sources":["components/quotes/HighlightedQuote.module.css","components/comments/Comments.module.css","components/comments/NewCommentForm.module.css","components/comments/CommentItem.module.css","components/comments/CommentsList.module.css","components/quotes/HighlightedQuote.js","components/comments/NewCommentForm.js","components/comments/CommentItem.js","components/comments/CommentsList.js","components/comments/Comments.js","pages/QuoteDetail.js"],"names":["module","exports","HighlightedQuote","props","className","classes","quote","text","author","NewCommentForm","commentTextRef","useRef","useHttp","addComment","sendRequest","status","error","onAddedComment","useEffect","form","onSubmit","event","preventDefault","enteredText","current","value","commentData","quoteId","LoadingSpinner","control","htmlFor","id","rows","ref","actions","CommentItem","item","CommentsList","comments","map","comment","Comments","useState","isAddingComment","setIsAddingComment","useParams","getAllComments","loadedComments","data","addedCommentHandler","useCallback","length","button1","onClick","e","QuoteDetail","match","useRouteMatch","getSingleQuote","loadedQuote","path","exact","to","url"],"mappings":"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","file":"static/js/4.5ede1fc6.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"quote\":\"HighlightedQuote_quote__1PXH0\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"comments\":\"Comments_comments__2QL8b\",\"button1\":\"Comments_button1__DM49g\",\"butto1\":\"Comments_butto1__pw2cW\",\"button1--flat\":\"Comments_button1--flat__HZfMo\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"NewCommentForm_form__3_5NH\",\"loading\":\"NewCommentForm_loading__1yoAE\",\"control\":\"NewCommentForm_control__23AJY\",\"actions\":\"NewCommentForm_actions__3P9iY\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"CommentItem_item__3UVnc\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"comments\":\"CommentsList_comments__2k3sY\"};","import classes from './HighlightedQuote.module.css';\n\nconst HighlightedQuote = (props) => {\n  return (\n    <figure className={classes.quote}>\n      <p>{props.text}</p>\n      <figcaption>{props.author}</figcaption>\n    </figure>\n  );\n};\n\nexport default HighlightedQuote;\n","import { useRef, useEffect } from 'react';\n\nimport useHttp from '../../hooks/use-http';\nimport { addComment } from '../../lib/api';\nimport LoadingSpinner from '../UI/LoadingSpinner';\nimport classes from './NewCommentForm.module.css';\n\nconst NewCommentForm = (props) => {\n  //\n\n\n\n\n  //\n  const commentTextRef = useRef();\n  \n\n  const { sendRequest, status, error } = useHttp(addComment);\n\n  const { onAddedComment } = props;\n\n  useEffect(() => {\n    if (status === 'completed' && !error) {\n      onAddedComment();\n      // adding a const to clear the text in comment\n      \n      \n      \n    }\n  }, [status, error, onAddedComment]);\n  // NEW HANDLER\n  \n\n  const submitFormHandler = (event) => {\n    event.preventDefault();\n\n    const enteredText = commentTextRef.current.value;\n\n    // optional: Could validate here\n\n    sendRequest({ commentData: { text: enteredText }, quoteId: props.quoteId });\n    \n   \n    \n  };\n  //\n  // const handleUserInput = (e) => {\n  //   setInputValue(commentTextRef.current.value);\n  // };\n\n \n  //\n  // onSubmit={submitFormHandler}\n\n  return (\n    <form className={classes.form} onSubmit={submitFormHandler}>\n      {status === 'pending' && (\n        <div className='centered'>\n          <LoadingSpinner />\n        </div>\n      )}\n       <div className={classes.control}> \n        <label htmlFor='comment'>Your Comment</label>\n        <textarea id='comment' rows='5' ref={commentTextRef}  ></textarea>\n      </div>\n      <div className={classes.actions}>\n        <button className='btn' >Add Comment</button>\n      </div>\n    </form>\n  );\n};\n\nexport default NewCommentForm;\n","import classes from './CommentItem.module.css';\n\nconst CommentItem = (props) => {\n  return (\n    <li className={classes.item}>\n      <p>{props.text}</p>\n    </li>\n  );\n};\n\nexport default CommentItem;\n","import CommentItem from './CommentItem';\nimport classes from './CommentsList.module.css';\n\nconst CommentsList = (props) => {\n  return (\n    <ul className={classes.comments}>\n      {props.comments.map((comment) => (\n        <CommentItem key={comment.id} text={comment.text} />\n      ))}\n    </ul>\n  );\n};\n\nexport default CommentsList;\n","import { useState, useEffect, useCallback } from 'react';\nimport { useParams } from 'react-router-dom';\n\nimport classes from './Comments.module.css';\nimport NewCommentForm from './NewCommentForm';\nimport useHttp from '../../hooks/use-http';\nimport { getAllComments } from '../../lib/api';\nimport LoadingSpinner from '../UI/LoadingSpinner';\nimport CommentsList from './CommentsList';\n\nconst Comments = () => {\n  //\n  //const [inputValue, setInputValue] = useState(\"\");\n  //\n  const [isAddingComment, setIsAddingComment] = useState(false);\n  const params = useParams();\n\n  const { quoteId } = params;\n\n  const { sendRequest, status, data: loadedComments } = useHttp(getAllComments);\n\n  useEffect(() => {\n    sendRequest(quoteId);\n  }, [quoteId, sendRequest]);\n\n  const startAddCommentHandler = () => {\n    setIsAddingComment(true);\n  };\n\n  const addedCommentHandler = useCallback(() => {\n    sendRequest(quoteId);\n  }, [sendRequest, quoteId]);\n\n  let comments;\n\n  if (status === 'pending') {\n    comments = (\n      <div className='centered'>\n        <LoadingSpinner />\n      </div>\n    );\n  }\n\n  if (status === 'completed' && loadedComments && loadedComments.length > 0) {\n    comments = <CommentsList comments={loadedComments} />;\n   \n  }\n\n  if (\n    status === 'completed' &&\n    (!loadedComments || loadedComments.length === 0)\n  ) {\n    comments = <p className='centered'>No comments were added yet!</p>;\n  }\n  //\n  const resetInputField = (e) => {\n   setIsAddingComment(false);\n  };\n   //\n\n  return (\n    <section className={classes.comments}>\n      <h2>User Comments</h2>\n      {!isAddingComment && (\n        <button className={classes.button1} onClick={startAddCommentHandler}>\n          Add a Comment\n        </button>)}\n        <button className={classes.button1} onClick={resetInputField}>\n          Remove TextBox\n        </button>\n      \n      {isAddingComment && (\n        <NewCommentForm\n          quoteId={quoteId}\n          onAddedComment={addedCommentHandler}\n        />\n      )}\n      {comments}\n    </section>\n  );\n};\n\nexport default Comments;\n","import { Fragment, useEffect } from 'react';\nimport { useParams, Route, Link, useRouteMatch } from 'react-router-dom';\n\nimport HighlightedQuote from '../components/quotes/HighlightedQuote';\nimport Comments from '../components/comments/Comments';\nimport useHttp from '../hooks/use-http';\nimport { getSingleQuote } from '../lib/api';\nimport LoadingSpinner from '../components/UI/LoadingSpinner';\n\nconst QuoteDetail = () => {\n  const match = useRouteMatch();\n  const params = useParams();\n\n  const { quoteId } = params;\n\n  const { sendRequest, status, data: loadedQuote, error } = useHttp(\n    getSingleQuote,\n    true\n  );\n\n  useEffect(() => {\n    sendRequest(quoteId);\n  }, [sendRequest, quoteId]);\n\n  if (status === 'pending') {\n    return (\n      <div className='centered'>\n        <LoadingSpinner />\n      </div>\n    );\n  }\n\n  if (error) {\n    return <p className='centered'>{error}</p>;\n  }\n\n  if (!loadedQuote.text) {\n    return <p>No quote found!</p>;\n  }\n\n  return (\n    <Fragment>\n      <HighlightedQuote text={loadedQuote.text} author={loadedQuote.author} />\n      <Route path={match.path} exact>\n        <div className='centered'>\n          <Link className='btn--flat' to={`${match.url}/comments`}>\n            Load Comments\n          </Link>\n        </div>\n      </Route>\n      <Route path={`${match.path}/comments`}>\n        <Comments />\n      </Route>\n    </Fragment>\n  );\n};\n\nexport default QuoteDetail;\n"],"sourceRoot":""}